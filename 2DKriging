rm(list=ls(all=TRUE))
wants <- c("ggplot2","sp","gstat","dplyr","scales","magrittr","maptools","raster","plot3D","dplyr","pracma","plotly")
has   <- wants %in% rownames(installed.packages())
if(any(!has)) install.packages(wants[!has])
for (pkg in wants) {library(pkg, character.only = TRUE)}
##
  #calling the data meuse, meuse will be SPDF and meuseDF would be DF
  data(meuse)
  meuseDF <- meuse
  coordinates(meuse) <- ~ x + y
  #Spatial Points Data Frame
  head(meuse)
  #data frame
  head(meuseDF)
##
  #Kriging
  lzn.vgm <- variogram(log(zinc)~1, meuse) # calculates sample variogram values 
  lzn.fit <- fit.variogram(lzn.vgm, model=vgm(1, "Sph", 900, 1)) # fit model
##
  # Making Grid for Interpolation
  MinX <- min(meuseDF$x);  MaxX <- max(meuseDF$x);
  MinY <- min(meuseDF$y);  MaxY <- max(meuseDF$y)  
  Xrange <- seq(MinX,MaxX,5);  Yrange <- seq(MinY,MaxY,5)
  # mesh grid
  Griding <- meshgrid(Xrange, Yrange)
  # mesh grid in a sequence
  GridDF <- data.frame(x=Griding$X[1:length(Griding$X)],y=Griding$Y[1:length(Griding$Y)])
  # just to show
    # this should be equal to Griding.X
    matrix(GridDF[,1], nrow=length(Yrange), ncol=length(Xrange))
    # this should be equak to Griding.Y
    matrix(GridDF[,2], nrow=length(Yrange), ncol=length(Xrange))
  #make it as SPDF
  Grid <-GridDF
  coordinates(Grid) <- ~ x + y # step 3 above
##
  #kriging Interpol, the data should be in SPDF format
  kriged <- krige(log(zinc) ~ 1, meuse, Grid, model=lzn.fit)
  #kriging for the point we already know
  krigedTest <- krige(log(zinc) ~ 1, meuse, meuse, model=lzn.fit)
  krigedTestDF <- data.frame(krigedTest)
  head(krigedTestDF[,3]-log(meuseDF[,6])) #it should be almost zero
  
  
##Plotting
  #plot the interpolated map in 2D
P1 <-  kriged %>% as.data.frame %>%
                 ggplot(aes(x=x, y=y)) + geom_tile(aes(fill=var1.pred)) + coord_equal() +
                 scale_fill_gradient(low = "yellow", high="red") +
                 scale_x_continuous(labels=comma) + scale_y_continuous(labels=comma) +
                 theme_bw()



# x, y and z coordinates
krigedDF <- as.data.frame(kriged)
Krigedsorted <- arrange(krigedDF,x,y)   
KrigedMatrix <- matrix(Krigedsorted$var1.pred, nrow=length(Yrange), ncol=length(Xrange))

# Plot
P2 <- plot_ly(meuseDF, x = ~x, y = ~y, z = ~zinc, color = ~zinc, colors = c('#BF382A', '#0C4B8E')) %>% add_markers() %>%
     layout(scene = list(xaxis = list(title = 'x'),
                         yaxis = list(title = 'y'),
                         zaxis = list(title = 'Zinc')))

P3 <- plot_ly(x = ~Xrange, y = ~Yrange, z = ~KrigedMatrix, color = ~KrigedMatrix) %>% add_surface()

XYZ <- data.frame(x=meuseDF$x,y=meuseDF$y,z=log(meuseDF$zinc))
P4 <- plot_ly(x = Xrange, y = Yrange,z = KrigedMatrix, type = "surface") %>% 
      add_trace(x = XYZ$x, y = XYZ$y, z = XYZ$z, mode = "markers", type = "scatter3d", 
            marker = list(size = 5, color = "red", symbol = 104))


P1
P2
P3
P4
